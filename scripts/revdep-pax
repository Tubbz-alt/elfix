#!/usr/bin/env python

import os
import subprocess
import re
import pax


def get_forward_linkings():
	var_db_pkg = '/var/db/pkg'
	forward_linkings = {}
	for cat in os.listdir(var_db_pkg):
		catdir = '%s/%s' % (var_db_pkg, cat)
		for pkg in os.listdir(catdir):
			pkgdir = '%s/%s' % (catdir, pkg)
			need = '%s/%s' % (pkgdir, 'NEEDED')
			try:
				g = open(need, 'r')
				needs = g.readlines()
				for line in needs:
					line = line.strip()
					link = re.split('\s', line)
					elf = link[0]
					linkings = re.split(',', link[1])
					forward_linkings[elf] = linkings 
			except:
				break

	return forward_linkings 


def invert_linkings( forward_linkings ):
	reverse_linkings = {}
	for elf in forward_linkings:
		for elf_dep in forward_linkings[elf]:
			reverse_linkings[elf_dep] = []

	for elf in forward_linkings:
		for elf_dep in forward_linkings[elf]:
			reverse_linkings[elf_dep].append(elf)

	return reverse_linkings 


def get_soname2file_mappings():
	ldconfig_output = subprocess.check_output(["/sbin/ldconfig", "-p"])
	ldconfig_lines = ldconfig_output.split('\n')
	ldconfig_lines.pop(0)			#first line is a header
	ldconfig_lines.pop()				#last line empty because of previous split
	mappings = {}
	for m in range(0,len(ldconfig_lines)):
		ldconfig_lines[m] = ldconfig_lines[m].strip()
		mapp = re.split('=>', ldconfig_lines[m] )
		soname = re.sub('\(.*$', '', mapp[0]).strip()
		abi = re.search('\(.+\)', mapp[0]).group(0)
		abi = abi.strip().strip('(').strip(')').strip()
		filename = mapp[1].strip()
		filename =  os.path.realpath(filename)
		mappings[soname] = [ filename, pax.getflags(filename), abi ]
	return mappings 

forward_linkings = get_forward_linkings()
reverse_linkings = invert_linkings( forward_linkings )
soname2file_mappings = get_soname2file_mappings()


""" Print out mapping: binary -> library, library, library ... """
for elf in forward_linkings:
	print elf
	for elf_dep in forward_linkings[elf]:
		print "\t", elf_dep
		#print "\t\t", soname2file_mappings[elf_dep]

raw_input()

""" Print out mapping: library -> binary, binary, binary ... """
for elf_dep in reverse_linkings:
	print elf_dep
	for elf in reverse_linkings[elf_dep]:
		print "\t", elf
		#if not path.exists(elf):
		#	print "%s doesn't exist!" % elf
raw_input()

for s in soname2file_mappings:
	print s, soname2file_mappings[s]
