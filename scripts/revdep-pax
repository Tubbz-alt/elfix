#!/usr/bin/env python

from os import listdir
#from os import listdir, path
import re

import pax


def get_forward_linkings():
	var_db_pkg = '/var/db/pkg'
	forward_linkings = {}
	for cat in listdir(var_db_pkg):
		catdir = '%s/%s' % (var_db_pkg, cat)
		for pkg in listdir(catdir):
			pkgdir = '%s/%s' % (catdir, pkg)
			need = '%s/%s' % (pkgdir, 'NEEDED')
			try:
				g = open(need, 'r')
				needs = g.readlines()
				for line in needs:
					line = line.strip()
					link = re.split('\s', line)
					elf = link[0]
					linkings = re.split(',', link[1])
					forward_linkings[elf] = linkings 
			except:
				break

	return forward_linkings 


def invert_linkings( forward_linkings ):
	reverse_linkings = {}
	for elf in forward_linkings:
		for elf_dep in forward_linkings[elf]:
			reverse_linkings[elf_dep] = []

	for elf in forward_linkings:
		for elf_dep in forward_linkings[elf]:
			reverse_linkings[elf_dep].append(elf)

	return reverse_linkings 


forward_linkings = get_forward_linkings()
reverse_linkings = invert_linkings( forward_linkings )


""" Print out mapping: binary -> library, library, library ... """
for elf in forward_linkings:
	print elf
	for elf_dep in forward_linkings[elf]:
		print "\t", elf_dep

raw_input()

""" Print out mapping: library -> binary, binary, binary ... """
for elf_dep in reverse_linkings:
	print elf_dep
	for elf in reverse_linkings[elf_dep]:
		print "\t", elf
		#if not path.exists(elf):
		#	print "%s doesn't exist!" % elf
